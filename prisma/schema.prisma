generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String    @id @default(cuid())
  name      String
  email     String    @unique
  password  String    // store hashed password
  avatarUrl String?   // profile picture
  bio       String?   // short bio
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  posts     Post[]
  likes     Like[]
  comments  Comment[]
  followers Follow[]  @relation("UserFollowers")
  following Follow[]  @relation("UserFollowing")
}

model Post {
  id        String    @id @default(cuid())
  imageUrl  String
  caption   String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  author    User      @relation(fields: [authorId], references: [id])
  authorId  String
  likes     Like[]
  comments  Comment[]
}

model Like {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())

  user   User @relation(fields: [userId], references: [id])
  userId String
  post   Post @relation(fields: [postId], references: [id])
  postId String

  @@unique([userId, postId]) // prevent duplicate likes
}

model Comment {
  id        String   @id @default(cuid())
  content   String
  createdAt DateTime @default(now())

  user   User @relation(fields: [userId], references: [id])
  userId String
  post   Post @relation(fields: [postId], references: [id])
  postId String
}

model Follow {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())

  follower   User @relation("UserFollowing", fields: [followerId], references: [id])
  followerId String

  following   User @relation("UserFollowers", fields: [followingId], references: [id])
  followingId String

  @@unique([followerId, followingId]) // prevent duplicate follows
}
